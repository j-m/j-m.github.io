import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, b as claim_element, f as children, g as claim_text, d as detach, h as attr, j as insert, k as append, B as set_data, n as noop } from './client.b2acbeeb.js';

/* src/components/tag.svelte generated by Svelte v3.23.2 */

function create_fragment(ctx) {
	let a;
	let div;
	let t;
	let a_title_value;
	let a_href_value;

	return {
		c() {
			a = element("a");
			div = element("div");
			t = text(/*title*/ ctx[1]);
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { rel: true, title: true, href: true });
			var a_nodes = children(a);
			div = claim_element(a_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*title*/ ctx[1]);
			div_nodes.forEach(detach);
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "tag svelte-1qnaxs1");
			attr(a, "rel", "prefetch");
			attr(a, "title", a_title_value = "View everything tagged '" + /*title*/ ctx[1] + "'");
			attr(a, "href", a_href_value = "tag/" + /*id*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, div);
			append(div, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);

			if (dirty & /*title*/ 2 && a_title_value !== (a_title_value = "View everything tagged '" + /*title*/ ctx[1] + "'")) {
				attr(a, "title", a_title_value);
			}

			if (dirty & /*id*/ 1 && a_href_value !== (a_href_value = "tag/" + /*id*/ ctx[0])) {
				attr(a, "href", a_href_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id } = $$props;
	let { title } = $$props;

	$$self.$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
	};

	return [id, title];
}

class Tag extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 0, title: 1 });
	}
}

export { Tag as T };
