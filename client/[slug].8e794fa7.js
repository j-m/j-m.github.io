import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, a as space, l as create_component, b as claim_element, f as children, g as claim_text, d as detach, c as claim_space, m as claim_component, j as insert, k as append, o as mount_component, u as transition_in, v as transition_out, w as destroy_component, C as empty, x as check_outros, y as destroy_each, p as get_spread_update, r as get_spread_object, q as query_selector_all, h as attr, B as set_data, H as HtmlTag, A as group_outros, z as assign } from './client.b2acbeeb.js';
import { t as tagable } from './tags.ee329af6.js';
import { T as Tag } from './tag.75c92952.js';
import { P as Project } from './project.f1ec0a0f.js';

/* src/routes/tag/[slug].svelte generated by Svelte v3.23.2 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i][0];
	child_ctx[3] = list[i][1];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (38:0) {#if tag.data.description}
function create_if_block_4(ctx) {
	let html_tag;
	let raw_value = /*tag*/ ctx[1].data.description + "";

	return {
		c() {
			this.h();
		},
		l(nodes) {
			this.h();
		},
		h() {
			html_tag = new HtmlTag(null);
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*tag*/ 2 && raw_value !== (raw_value = /*tag*/ ctx[1].data.description + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) html_tag.d();
		}
	};
}

// (42:0) {#if tag.parent}
function create_if_block_3(ctx) {
	let h3;
	let t0;
	let t1;
	let tag_1;
	let current;

	tag_1 = new Tag({
			props: {
				id: /*tag*/ ctx[1].parent,
				title: tagable.tags[/*tag*/ ctx[1].parent].data.title
			}
		});

	return {
		c() {
			h3 = element("h3");
			t0 = text("Parent");
			t1 = space();
			create_component(tag_1.$$.fragment);
		},
		l(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Parent");
			h3_nodes.forEach(detach);
			t1 = claim_space(nodes);
			claim_component(tag_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t0);
			insert(target, t1, anchor);
			mount_component(tag_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tag_1_changes = {};
			if (dirty & /*tag*/ 2) tag_1_changes.id = /*tag*/ ctx[1].parent;
			if (dirty & /*tag*/ 2) tag_1_changes.title = tagable.tags[/*tag*/ ctx[1].parent].data.title;
			tag_1.$set(tag_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tag_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tag_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(tag_1, detaching);
		}
	};
}

// (47:0) {#if tag.children}
function create_if_block_2(ctx) {
	let h3;
	let t0;
	let t1;
	let each_1_anchor;
	let current;
	let each_value_3 = /*tag*/ ctx[1].children;
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			h3 = element("h3");
			t0 = text("Children");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Children");
			h3_nodes.forEach(detach);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t0);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*tag, tagable*/ 2) {
				each_value_3 = /*tag*/ ctx[1].children;
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (49:2) {#each tag.children as id}
function create_each_block_3(ctx) {
	let tag_1;
	let current;

	tag_1 = new Tag({
			props: {
				id: /*id*/ ctx[2],
				title: tagable.tags[/*id*/ ctx[2]].data.title
			}
		});

	return {
		c() {
			create_component(tag_1.$$.fragment);
		},
		l(nodes) {
			claim_component(tag_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(tag_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tag_1_changes = {};
			if (dirty & /*tag*/ 2) tag_1_changes.id = /*id*/ ctx[2];
			if (dirty & /*tag*/ 2) tag_1_changes.title = tagable.tags[/*id*/ ctx[2]].data.title;
			tag_1.$set(tag_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tag_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tag_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tag_1, detaching);
		}
	};
}

// (54:0) {#if tag.similar}
function create_if_block_1(ctx) {
	let h3;
	let t0;
	let t1;
	let each_1_anchor;
	let current;
	let each_value_2 = /*tag*/ ctx[1].similar;
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			h3 = element("h3");
			t0 = text("Similar");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Similar");
			h3_nodes.forEach(detach);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t0);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*tag, tagable*/ 2) {
				each_value_2 = /*tag*/ ctx[1].similar;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (56:2) {#each tag.similar as id}
function create_each_block_2(ctx) {
	let tag_1;
	let current;

	tag_1 = new Tag({
			props: {
				id: /*id*/ ctx[2],
				title: tagable.tags[/*id*/ ctx[2]].data.title
			}
		});

	return {
		c() {
			create_component(tag_1.$$.fragment);
		},
		l(nodes) {
			claim_component(tag_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(tag_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tag_1_changes = {};
			if (dirty & /*tag*/ 2) tag_1_changes.id = /*id*/ ctx[2];
			if (dirty & /*tag*/ 2) tag_1_changes.title = tagable.tags[/*id*/ ctx[2]].data.title;
			tag_1.$set(tag_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tag_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tag_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tag_1, detaching);
		}
	};
}

// (61:0) {#if tag.inverse}
function create_if_block(ctx) {
	let h3;
	let t0;
	let t1;
	let each_1_anchor;
	let current;
	let each_value_1 = /*tag*/ ctx[1].inverse;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			h3 = element("h3");
			t0 = text("Inverse");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l(nodes) {
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Inverse");
			h3_nodes.forEach(detach);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t0);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*tag, tagable*/ 2) {
				each_value_1 = /*tag*/ ctx[1].inverse;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (63:2) {#each tag.inverse as id}
function create_each_block_1(ctx) {
	let tag_1;
	let current;

	tag_1 = new Tag({
			props: {
				id: /*id*/ ctx[2],
				title: tagable.tags[/*id*/ ctx[2]].data.title
			}
		});

	return {
		c() {
			create_component(tag_1.$$.fragment);
		},
		l(nodes) {
			claim_component(tag_1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(tag_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tag_1_changes = {};
			if (dirty & /*tag*/ 2) tag_1_changes.id = /*id*/ ctx[2];
			if (dirty & /*tag*/ 2) tag_1_changes.title = tagable.tags[/*id*/ ctx[2]].data.title;
			tag_1.$set(tag_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tag_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tag_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tag_1, detaching);
		}
	};
}

// (72:2) {:else}
function create_else_block(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text("No projects directly associate with this tag");
		},
		l(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "No projects directly associate with this tag");
			p_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (70:2) {#each Object.entries(projects) as [id, data]}
function create_each_block(ctx) {
	let project;
	let current;

	const project_spread_levels = [
		{ id: /*id*/ ctx[2] },
		/*data*/ ctx[3],
		{ tags: tagable.getTags(/*id*/ ctx[2]) },
		{
			age: new Date(new Date(/*data*/ ctx[3].date) - new Date("1997-10-24")).getFullYear() - 1970
		}
	];

	let project_props = {};

	for (let i = 0; i < project_spread_levels.length; i += 1) {
		project_props = assign(project_props, project_spread_levels[i]);
	}

	project = new Project({ props: project_props });

	return {
		c() {
			create_component(project.$$.fragment);
		},
		l(nodes) {
			claim_component(project.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(project, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const project_changes = (dirty & /*Object, projects, tagable, Date*/ 1)
			? get_spread_update(project_spread_levels, [
					dirty & /*Object, projects*/ 1 && { id: /*id*/ ctx[2] },
					dirty & /*Object, projects*/ 1 && get_spread_object(/*data*/ ctx[3]),
					dirty & /*tagable, Object, projects*/ 1 && { tags: tagable.getTags(/*id*/ ctx[2]) },
					dirty & /*Date, Object, projects*/ 1 && {
						age: new Date(new Date(/*data*/ ctx[3].date) - new Date("1997-10-24")).getFullYear() - 1970
					}
				])
			: {};

			project.$set(project_changes);
		},
		i(local) {
			if (current) return;
			transition_in(project.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(project.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(project, detaching);
		}
	};
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1_value = /*tag*/ ctx[1].data.title + "";
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let h2;
	let t8;
	let t9;
	let div;
	let current;
	document.title = title_value = "Jonathan Marsh - Tag - " + /*tag*/ ctx[1].data.title;
	let if_block0 = /*tag*/ ctx[1].data.description && create_if_block_4(ctx);
	let if_block1 = /*tag*/ ctx[1].parent && create_if_block_3(ctx);
	let if_block2 = /*tag*/ ctx[1].children && create_if_block_2(ctx);
	let if_block3 = /*tag*/ ctx[1].similar && create_if_block_1(ctx);
	let if_block4 = /*tag*/ ctx[1].inverse && create_if_block(ctx);
	let each_value = Object.entries(/*projects*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block();
	}

	return {
		c() {
			t0 = space();
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			if (if_block3) if_block3.c();
			t6 = space();
			if (if_block4) if_block4.c();
			t7 = space();
			h2 = element("h2");
			t8 = text("Projects");
			t9 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else) {
				each_1_else.c();
			}

			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-v6f6pg\"]", document.head);
			head_nodes.forEach(detach);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach);
			t2 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t3 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t4 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t5 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t6 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t7 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t8 = claim_text(h2_nodes, "Projects");
			h2_nodes.forEach(detach);
			t9 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			if (each_1_else) {
				each_1_else.l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "id", "projects");
			attr(div, "class", "svelte-odz3xy");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, h1, anchor);
			append(h1, t1);
			insert(target, t2, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t3, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t4, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t5, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert(target, t6, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert(target, t7, anchor);
			insert(target, h2, anchor);
			append(h2, t8);
			insert(target, t9, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (each_1_else) {
				each_1_else.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*tag*/ 2) && title_value !== (title_value = "Jonathan Marsh - Tag - " + /*tag*/ ctx[1].data.title)) {
				document.title = title_value;
			}

			if ((!current || dirty & /*tag*/ 2) && t1_value !== (t1_value = /*tag*/ ctx[1].data.title + "")) set_data(t1, t1_value);

			if (/*tag*/ ctx[1].data.description) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(t3.parentNode, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*tag*/ ctx[1].parent) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*tag*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t4.parentNode, t4);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*tag*/ ctx[1].children) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*tag*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t5.parentNode, t5);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*tag*/ ctx[1].similar) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*tag*/ 2) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t6.parentNode, t6);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*tag*/ ctx[1].inverse) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty & /*tag*/ 2) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(t7.parentNode, t7);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (dirty & /*Object, projects, tagable, Date*/ 1) {
				each_value = Object.entries(/*projects*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();

				if (each_value.length) {
					if (each_1_else) {
						each_1_else.d(1);
						each_1_else = null;
					}
				} else if (!each_1_else) {
					each_1_else = create_else_block();
					each_1_else.c();
					each_1_else.m(div, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(h1);
			if (detaching) detach(t2);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t3);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t4);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t5);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t6);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(t7);
			if (detaching) detach(h2);
			if (detaching) detach(t9);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (each_1_else) each_1_else.d();
		}
	};
}

async function preload({ params, query }) {
	const tag = tagable.tags[params.slug];

	if (tag) {
		return {
			tag,
			projects: tagable.getResources(params.slug)
		};
	}

	this.error(404, "Not found");
}

function instance($$self, $$props, $$invalidate) {
	let { projects } = $$props;
	let { tag } = $$props;

	$$self.$set = $$props => {
		if ("projects" in $$props) $$invalidate(0, projects = $$props.projects);
		if ("tag" in $$props) $$invalidate(1, tag = $$props.tag);
	};

	return [projects, tag];
}

class U5Bslugu5D extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { projects: 0, tag: 1 });
	}
}

export default U5Bslugu5D;
export { preload };
