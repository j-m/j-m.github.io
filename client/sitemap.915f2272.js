import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, a as space, b as claim_element, f as children, g as claim_text, d as detach, c as claim_space, h as attr, j as insert, k as append, B as set_data, y as destroy_each, q as query_selector_all, n as noop } from './client.b2acbeeb.js';
import { t as tagable } from './tags.ee329af6.js';

/* src/routes/sitemap.svelte generated by Svelte v3.23.2 */

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i][0];
	child_ctx[3] = list[i][1];
	return child_ctx;
}

// (63:6) {#each links as link}
function create_each_block_1(ctx) {
	let li;
	let a;
	let t_value = /*link*/ ctx[6].title + "";
	let t;
	let a_href_value;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*link*/ ctx[6].path);
			attr(a, "class", "svelte-1j05vq5");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*sitemap*/ 1 && t_value !== (t_value = /*link*/ ctx[6].title + "")) set_data(t, t_value);

			if (dirty & /*sitemap*/ 1 && a_href_value !== (a_href_value = /*link*/ ctx[6].path)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (59:2) {#each Object.entries(sitemap) as [category, links]}
function create_each_block(ctx) {
	let div;
	let h2;
	let t0_value = /*category*/ ctx[2] + "";
	let t0;
	let t1;
	let ul;
	let t2;
	let each_value_1 = /*links*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			div = element("div");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			ul = claim_element(div_nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			t2 = claim_space(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "column svelte-1j05vq5");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(h2, t0);
			append(div, t1);
			append(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*sitemap*/ 1 && t0_value !== (t0_value = /*category*/ ctx[2] + "")) set_data(t0, t0_value);

			if (dirty & /*Object, sitemap*/ 1) {
				each_value_1 = /*links*/ ctx[3];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let div;
	let each_value = Object.entries(/*sitemap*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Sitemap");
			t2 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-u4bjeq\"]", document.head);
			head_nodes.forEach(detach);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Sitemap");
			h1_nodes.forEach(detach);
			t2 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			document.title = "Jonathan Marsh - Sitemap";
			attr(div, "class", "row svelte-1j05vq5");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, h1, anchor);
			append(h1, t1);
			insert(target, t2, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*Object, sitemap*/ 1) {
				each_value = Object.entries(/*sitemap*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(h1);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	var sitemap = {
		"Main": [
			{ path: ".", title: "Home" },
			{ path: "project", title: "Projects" },
			{ path: "policies", title: "Policies" },
			{ path: "sitemap", title: "Sitemap" }
		]
	};

	function addRoute(category, path, title) {
		sitemap[category]
		? sitemap[category].push({ path, title })
		: $$invalidate(0, sitemap[category] = [{ path, title }], sitemap);
	}

	for (let [key, tag] of Object.entries(tagable.tags)) {
		addRoute("Tags", `tag/${key}`, tag.data.title);
	}

	for (let [key, project] of Object.entries(tagable.resources)) {
		if (project.links) {
			if (project.links.demo) {
				addRoute("Demo", project.links.demo, project.title);
			}

			if (project.links.readMore) {
				addRoute("Read More", `project/${key}`, project.title);
			}
		}
	}

	return [sitemap];
}

class Sitemap extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Sitemap;
