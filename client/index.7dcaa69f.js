import { S as SvelteComponent, i as init, s as safe_not_equal, l as create_component, m as claim_component, o as mount_component, p as get_spread_update, r as get_spread_object, u as transition_in, v as transition_out, w as destroy_component, a as space, e as element, q as query_selector_all, d as detach, c as claim_space, b as claim_element, f as children, h as attr, j as insert, x as check_outros, y as destroy_each, z as assign, A as group_outros } from './client.b2acbeeb.js';
import { t as tagable } from './tags.ee329af6.js';
import './tag.75c92952.js';
import { P as Project } from './project.f1ec0a0f.js';

/* src/routes/project/index.svelte generated by Svelte v3.23.2 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i][0];
	child_ctx[2] = list[i][1];
	return child_ctx;
}

// (32:2) {#each Object.entries(projects) as [id, data]}
function create_each_block(ctx) {
	let project;
	let current;

	const project_spread_levels = [
		{ id: /*id*/ ctx[1] },
		/*data*/ ctx[2],
		{ tags: tagable.getTags(/*id*/ ctx[1]) },
		{
			age: new Date(new Date(/*data*/ ctx[2].date) - new Date("1997-10-24")).getFullYear() - 1970
		}
	];

	let project_props = {};

	for (let i = 0; i < project_spread_levels.length; i += 1) {
		project_props = assign(project_props, project_spread_levels[i]);
	}

	project = new Project({ props: project_props });

	return {
		c() {
			create_component(project.$$.fragment);
		},
		l(nodes) {
			claim_component(project.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(project, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const project_changes = (dirty & /*Object, projects, tagable, Date*/ 1)
			? get_spread_update(project_spread_levels, [
					dirty & /*Object, projects*/ 1 && { id: /*id*/ ctx[1] },
					dirty & /*Object, projects*/ 1 && get_spread_object(/*data*/ ctx[2]),
					dirty & /*tagable, Object, projects*/ 1 && { tags: tagable.getTags(/*id*/ ctx[1]) },
					dirty & /*Date, Object, projects*/ 1 && {
						age: new Date(new Date(/*data*/ ctx[2].date) - new Date("1997-10-24")).getFullYear() - 1970
					}
				])
			: {};

			project.$set(project_changes);
		},
		i(local) {
			if (current) return;
			transition_in(project.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(project.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(project, detaching);
		}
	};
}

function create_fragment(ctx) {
	let t;
	let div;
	let current;
	let each_value = Object.entries(/*projects*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1qjuvnr\"]", document.head);
			head_nodes.forEach(detach);
			t = claim_space(nodes);
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			document.title = "Jonathan Marsh - Projects";
			attr(div, "id", "projects");
			attr(div, "class", "svelte-udteec");
		},
		m(target, anchor) {
			insert(target, t, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*Object, projects, tagable, Date*/ 1) {
				each_value = Object.entries(/*projects*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(t);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function preload({ params, query }) {
	return { projects: tagable.resources };
}

function instance($$self, $$props, $$invalidate) {
	let { projects } = $$props;

	$$self.$set = $$props => {
		if ("projects" in $$props) $$invalidate(0, projects = $$props.projects);
	};

	return [projects];
}

class Project_1 extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { projects: 0 });
	}
}

export default Project_1;
export { preload };
