import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, b as claim_element, h as attr, j as insert, d as detach, t as text, f as children, g as claim_text, k as append, B as set_data, a as space, c as claim_space, l as create_component, m as claim_component, o as mount_component, u as transition_in, v as transition_out, w as destroy_component, A as group_outros, x as check_outros, y as destroy_each } from './client.b2acbeeb.js';
import { T as Tag } from './tag.75c92952.js';

/* src/components/project.svelte generated by Svelte v3.23.2 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i][0];
	child_ctx[10] = list[i][1];
	return child_ctx;
}

// (130:2) {#if preview}
function create_if_block_7(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { class: true, alt: true, src: true });
			this.h();
		},
		h() {
			attr(img, "class", "preview svelte-v18fl7");
			attr(img, "alt", "preview");
			if (img.src !== (img_src_value = /*preview*/ ctx[4])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*preview*/ 16 && img.src !== (img_src_value = /*preview*/ ctx[4])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (135:2) {:else}
function create_else_block(ctx) {
	let h2;
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text(/*title*/ ctx[5]);
			this.h();
		},
		l(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t = claim_text(h2_nodes, /*title*/ ctx[5]);
			h2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h2, "class", "title svelte-v18fl7");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 32) set_data(t, /*title*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (133:2) {#if logo}
function create_if_block_6(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { class: true, alt: true, src: true });
			this.h();
		},
		h() {
			attr(img, "class", "title svelte-v18fl7");
			attr(img, "alt", "logo");
			if (img.src !== (img_src_value = /*logo*/ ctx[3])) attr(img, "src", img_src_value);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*logo*/ 8 && img.src !== (img_src_value = /*logo*/ ctx[3])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (138:2) {#if age}
function create_if_block_5(ctx) {
	let p;
	let t0;
	let t1;
	let t2;
	let time;
	let t3;

	return {
		c() {
			p = element("p");
			t0 = text("Age: ");
			t1 = text(/*age*/ ctx[6]);
			t2 = text(" | Date: ");
			time = element("time");
			t3 = text(/*date*/ ctx[1]);
			this.h();
		},
		l(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Age: ");
			t1 = claim_text(p_nodes, /*age*/ ctx[6]);
			t2 = claim_text(p_nodes, " | Date: ");
			time = claim_element(p_nodes, "TIME", { datetime: true });
			var time_nodes = children(time);
			t3 = claim_text(time_nodes, /*date*/ ctx[1]);
			time_nodes.forEach(detach);
			p_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(time, "datetime", /*date*/ ctx[1]);
			attr(p, "class", "date svelte-v18fl7");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			append(p, t2);
			append(p, time);
			append(time, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*age*/ 64) set_data(t1, /*age*/ ctx[6]);
			if (dirty & /*date*/ 2) set_data(t3, /*date*/ ctx[1]);

			if (dirty & /*date*/ 2) {
				attr(time, "datetime", /*date*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (142:2) {#if caption}
function create_if_block_4(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			this.h();
		},
		l(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "class", "caption svelte-v18fl7");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			p.innerHTML = /*caption*/ ctx[0];
		},
		p(ctx, dirty) {
			if (dirty & /*caption*/ 1) p.innerHTML = /*caption*/ ctx[0];		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (145:2) {#if links}
function create_if_block(ctx) {
	let div;
	let t0;
	let t1;
	let if_block0 = /*links*/ ctx[7].readMore && create_if_block_3(ctx);
	let if_block1 = /*links*/ ctx[7].demo && create_if_block_2(ctx);
	let if_block2 = /*links*/ ctx[7].github && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t0 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t1 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "links svelte-v18fl7");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			if (if_block2) if_block2.m(div, null);
		},
		p(ctx, dirty) {
			if (/*links*/ ctx[7].readMore) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*links*/ ctx[7].demo) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*links*/ ctx[7].github) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};
}

// (147:4) {#if links.readMore}
function create_if_block_3(ctx) {
	let a;
	let img;
	let img_src_value;
	let a_href_value;
	let a_title_value;

	return {
		c() {
			a = element("a");
			img = element("img");
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, title: true, class: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { alt: true, src: true, class: true });
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img, "alt", "Read more icon");
			if (img.src !== (img_src_value = "images/icons/read-more.svg")) attr(img, "src", img_src_value);
			attr(img, "class", "svelte-v18fl7");
			attr(a, "href", a_href_value = "project/" + /*id*/ ctx[9]);
			attr(a, "title", a_title_value = "Read more about " + /*title*/ ctx[5]);
			attr(a, "class", "link svelte-v18fl7");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, img);
		},
		p(ctx, dirty) {
			if (dirty & /*id*/ 512 && a_href_value !== (a_href_value = "project/" + /*id*/ ctx[9])) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*title*/ 32 && a_title_value !== (a_title_value = "Read more about " + /*title*/ ctx[5])) {
				attr(a, "title", a_title_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

// (152:4) {#if links.demo}
function create_if_block_2(ctx) {
	let a;
	let img;
	let img_src_value;
	let a_href_value;
	let a_title_value;

	return {
		c() {
			a = element("a");
			img = element("img");
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, title: true, class: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { alt: true, src: true, class: true });
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img, "alt", "Demo icon");
			if (img.src !== (img_src_value = "images/icons/demo.svg")) attr(img, "src", img_src_value);
			attr(img, "class", "svelte-v18fl7");
			attr(a, "href", a_href_value = /*links*/ ctx[7].demo);
			attr(a, "title", a_title_value = "Demo " + /*title*/ ctx[5]);
			attr(a, "class", "link svelte-v18fl7");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, img);
		},
		p(ctx, dirty) {
			if (dirty & /*links*/ 128 && a_href_value !== (a_href_value = /*links*/ ctx[7].demo)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*title*/ 32 && a_title_value !== (a_title_value = "Demo " + /*title*/ ctx[5])) {
				attr(a, "title", a_title_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

// (157:4) {#if links.github}
function create_if_block_1(ctx) {
	let a;
	let img;
	let img_src_value;
	let a_href_value;
	let a_title_value;

	return {
		c() {
			a = element("a");
			img = element("img");
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true, title: true, class: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { alt: true, src: true, class: true });
			a_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img, "alt", "GitHub Octocat");
			if (img.src !== (img_src_value = "images/logos/github.png")) attr(img, "src", img_src_value);
			attr(img, "class", "svelte-v18fl7");
			attr(a, "href", a_href_value = /*links*/ ctx[7].github);
			attr(a, "title", a_title_value = "View the source code for " + /*title*/ ctx[5]);
			attr(a, "class", "link svelte-v18fl7");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, img);
		},
		p(ctx, dirty) {
			if (dirty & /*links*/ 128 && a_href_value !== (a_href_value = /*links*/ ctx[7].github)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*title*/ 32 && a_title_value !== (a_title_value = "View the source code for " + /*title*/ ctx[5])) {
				attr(a, "title", a_title_value);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

// (165:4) {#each Object.entries(tags) as [id, tag]}
function create_each_block(ctx) {
	let tag;
	let current;

	tag = new Tag({
			props: {
				id: /*id*/ ctx[9],
				title: /*tag*/ ctx[10].data.title
			}
		});

	return {
		c() {
			create_component(tag.$$.fragment);
		},
		l(nodes) {
			claim_component(tag.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(tag, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tag_changes = {};
			if (dirty & /*tags*/ 256) tag_changes.id = /*id*/ ctx[9];
			if (dirty & /*tags*/ 256) tag_changes.title = /*tag*/ ctx[10].data.title;
			tag.$set(tag_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tag.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tag.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tag, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let t0;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let t5;
	let div0;
	let current;
	let if_block0 = /*preview*/ ctx[4] && create_if_block_7(ctx);

	function select_block_type(ctx, dirty) {
		if (/*logo*/ ctx[3]) return create_if_block_6;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);
	let if_block2 = /*age*/ ctx[6] && create_if_block_5(ctx);
	let if_block3 = /*caption*/ ctx[0] && create_if_block_4(ctx);
	let if_block4 = /*links*/ ctx[7] && create_if_block(ctx);
	let each_value = Object.entries(/*tags*/ ctx[8]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			p = element("p");
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (if_block0) if_block0.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			if_block1.l(div1_nodes);
			t1 = claim_space(div1_nodes);
			if (if_block2) if_block2.l(div1_nodes);
			t2 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			p_nodes.forEach(detach);
			t3 = claim_space(div1_nodes);
			if (if_block3) if_block3.l(div1_nodes);
			t4 = claim_space(div1_nodes);
			if (if_block4) if_block4.l(div1_nodes);
			t5 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "class", "description svelte-v18fl7");
			attr(div0, "class", "tags svelte-v18fl7");
			attr(div1, "class", "project svelte-v18fl7");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			if_block1.m(div1, null);
			append(div1, t1);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t2);
			append(div1, p);
			p.innerHTML = /*description*/ ctx[2];
			append(div1, t3);
			if (if_block3) if_block3.m(div1, null);
			append(div1, t4);
			if (if_block4) if_block4.m(div1, null);
			append(div1, t5);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*preview*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_7(ctx);
					if_block0.c();
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div1, t1);
				}
			}

			if (/*age*/ ctx[6]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_5(ctx);
					if_block2.c();
					if_block2.m(div1, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (!current || dirty & /*description*/ 4) p.innerHTML = /*description*/ ctx[2];
			if (/*caption*/ ctx[0]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_4(ctx);
					if_block3.c();
					if_block3.m(div1, t4);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*links*/ ctx[7]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					if_block4.m(div1, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (dirty & /*Object, tags*/ 256) {
				each_value = Object.entries(/*tags*/ ctx[8]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { id } = $$props;
	let { caption } = $$props;
	let { date } = $$props;
	let { description } = $$props;
	let { logo } = $$props;
	let { preview } = $$props;
	let { title } = $$props;
	let { age } = $$props;
	let { links = {} } = $$props;
	let { tags = [] } = $$props;

	$$self.$set = $$props => {
		if ("id" in $$props) $$invalidate(9, id = $$props.id);
		if ("caption" in $$props) $$invalidate(0, caption = $$props.caption);
		if ("date" in $$props) $$invalidate(1, date = $$props.date);
		if ("description" in $$props) $$invalidate(2, description = $$props.description);
		if ("logo" in $$props) $$invalidate(3, logo = $$props.logo);
		if ("preview" in $$props) $$invalidate(4, preview = $$props.preview);
		if ("title" in $$props) $$invalidate(5, title = $$props.title);
		if ("age" in $$props) $$invalidate(6, age = $$props.age);
		if ("links" in $$props) $$invalidate(7, links = $$props.links);
		if ("tags" in $$props) $$invalidate(8, tags = $$props.tags);
	};

	return [caption, date, description, logo, preview, title, age, links, tags, id];
}

class Project extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			id: 9,
			caption: 0,
			date: 1,
			description: 2,
			logo: 3,
			preview: 4,
			title: 5,
			age: 6,
			links: 7,
			tags: 8
		});
	}
}

export { Project as P };
