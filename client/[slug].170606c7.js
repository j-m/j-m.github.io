import { S as SvelteComponent, i as init, s as safe_not_equal, l as create_component, m as claim_component, o as mount_component, u as transition_in, v as transition_out, w as destroy_component, a as space, e as element, t as text, q as query_selector_all, d as detach, c as claim_space, b as claim_element, f as children, g as claim_text, h as attr, j as insert, k as append, B as set_data, x as check_outros, y as destroy_each, A as group_outros } from './client.b2acbeeb.js';
import { t as tagable } from './tags.ee329af6.js';
import { T as Tag } from './tag.75c92952.js';

/* src/routes/project/[slug].svelte generated by Svelte v3.23.2 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i][0];
	child_ctx[3] = list[i][1];
	return child_ctx;
}

// (35:2) {#each Object.entries(tags) as [id, tag]}
function create_each_block(ctx) {
	let tag;
	let current;

	tag = new Tag({
			props: {
				id: /*id*/ ctx[2],
				title: /*tag*/ ctx[3].data.title
			}
		});

	return {
		c() {
			create_component(tag.$$.fragment);
		},
		l(nodes) {
			claim_component(tag.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(tag, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tag_changes = {};
			if (dirty & /*tags*/ 2) tag_changes.id = /*id*/ ctx[2];
			if (dirty & /*tags*/ 2) tag_changes.title = /*tag*/ ctx[3].data.title;
			tag.$set(tag_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tag.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tag.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tag, detaching);
		}
	};
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let h1;
	let t1_value = /*project*/ ctx[0].title + "";
	let t1;
	let t2;
	let h2;
	let t3;
	let t4;
	let div0;
	let t5;
	let h3;
	let t6;
	let t7;
	let div1;
	let raw_value = /*project*/ ctx[0].html + "";
	let current;
	document.title = title_value = "Jonathan Marsh - Project - " + /*project*/ ctx[0].title;
	let each_value = Object.entries(/*tags*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			t0 = space();
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			h2 = element("h2");
			t3 = text("Tags");
			t4 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			h3 = element("h3");
			t6 = text("About");
			t7 = space();
			div1 = element("div");
			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1m7th4a\"]", document.head);
			head_nodes.forEach(detach);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach);
			t2 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, "Tags");
			h2_nodes.forEach(detach);
			t4 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach);
			t5 = claim_space(nodes);
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t6 = claim_text(h3_nodes, "About");
			h3_nodes.forEach(detach);
			t7 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "tags");
			attr(div1, "class", "content");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, h1, anchor);
			append(h1, t1);
			insert(target, t2, anchor);
			insert(target, h2, anchor);
			append(h2, t3);
			insert(target, t4, anchor);
			insert(target, div0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			insert(target, t5, anchor);
			insert(target, h3, anchor);
			append(h3, t6);
			insert(target, t7, anchor);
			insert(target, div1, anchor);
			div1.innerHTML = raw_value;
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*project*/ 1) && title_value !== (title_value = "Jonathan Marsh - Project - " + /*project*/ ctx[0].title)) {
				document.title = title_value;
			}

			if ((!current || dirty & /*project*/ 1) && t1_value !== (t1_value = /*project*/ ctx[0].title + "")) set_data(t1, t1_value);

			if (dirty & /*Object, tags*/ 2) {
				each_value = Object.entries(/*tags*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if ((!current || dirty & /*project*/ 1) && raw_value !== (raw_value = /*project*/ ctx[0].html + "")) div1.innerHTML = raw_value;		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(h1);
			if (detaching) detach(t2);
			if (detaching) detach(h2);
			if (detaching) detach(t4);
			if (detaching) detach(div0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t5);
			if (detaching) detach(h3);
			if (detaching) detach(t7);
			if (detaching) detach(div1);
		}
	};
}

async function preload({ params, query }) {
	const project = tagable.resources[params.slug];

	if (project) {
		if (project.links.readMore.type === "html-url") {
			const page = await this.fetch(project.links.readMore.url);
			project.html = await page.text();
		}

		return {
			project,
			tags: tagable.getTags(params.slug)
		};
	}

	this.error(404, "Not found");
}

function instance($$self, $$props, $$invalidate) {
	let { project } = $$props;
	let { tags } = $$props;

	$$self.$set = $$props => {
		if ("project" in $$props) $$invalidate(0, project = $$props.project);
		if ("tags" in $$props) $$invalidate(1, tags = $$props.tags);
	};

	return [project, tags];
}

class U5Bslugu5D extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { project: 0, tags: 1 });
	}
}

export default U5Bslugu5D;
export { preload };
